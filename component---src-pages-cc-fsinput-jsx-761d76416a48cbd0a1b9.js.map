{"version":3,"sources":["webpack:///component---src-pages-cc-fsinput-jsx-761d76416a48cbd0a1b9.js","webpack:///./src/pages/cc-fsinput.jsx"],"names":["webpackJsonp","182","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_react","_react2","FSFormChallenge","createElement","href","target","rel"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,EAASC,GAEhC,YAQA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GANvFH,EAAQI,YAAa,CCPtB,IAAAE,GAAAL,EAAA,GDWKM,EAAUL,EAAuBI,GCThCE,EAAkB,iBACtBD,GAAAF,QAAAI,cAAA,WACEF,EAAAF,QAAAI,cAAA,WACEF,EAAAF,QAAAI,cAAA,wBACAF,EAAAF,QAAAI,cAAA,yUAMAF,EAAAF,QAAAI,cAAA,KAAGC,KAAK,yDAAyDC,OAAO,SAASC,IAAI,uBAArF,aACAL,EAAAF,QAAAI,cAAA,WACAF,EAAAF,QAAAI,cAAA,gDACAF,EAAAF,QAAAI,cAAA,4bAOAF,EAAAF,QAAAI,cAAA,KAAGC,KAAK,gEAAgEC,OAAO,SAASC,IAAI,uBAA5F,kBACAL,EAAAF,QAAAI,cAAA,WACAF,EAAAF,QAAAI,cAAA,KAAGC,KAAK,uEAAuEC,OAAO,SAASC,IAAI,uBAAnG,kBDuCLZ,GAAQK,QClCMG,EDmCdT,EAAOC,QAAUA,EAAiB","file":"component---src-pages-cc-fsinput-jsx-761d76416a48cbd0a1b9.js","sourcesContent":["webpackJsonp([226866146246559],{\n\n/***/ 182:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(4);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar FSFormChallenge = function FSFormChallenge() {\n\t  return _react2.default.createElement(\n\t    \"div\",\n\t    null,\n\t    _react2.default.createElement(\n\t      \"div\",\n\t      null,\n\t      _react2.default.createElement(\n\t        \"h2\",\n\t        null,\n\t        \"Input Form\"\n\t      ),\n\t      _react2.default.createElement(\n\t        \"p\",\n\t        null,\n\t        \"This challenge involved replicating the look and functionality of an input form provided in a gif. While most of the code was simple enough, I didn't have much experience implementing animation on buttons. Instead I opted to use CSS transitions to color in the border of the button. This challenge was done in React.\"\n\t      ),\n\t      _react2.default.createElement(\n\t        \"a\",\n\t        { href: \"https://codepen.io/Kiwilicious/pen/RxqWXY?editors=0110\", target: \"_blank\", rel: \"noopener noreferrer\" },\n\t        \"Code here\"\n\t      ),\n\t      _react2.default.createElement(\"hr\", null),\n\t      _react2.default.createElement(\n\t        \"h2\",\n\t        null,\n\t        \"Ruby Implementation of Erlang Code\"\n\t      ),\n\t      _react2.default.createElement(\n\t        \"p\",\n\t        null,\n\t        \"This challenge involved taking the code provided in the language Erlang and recreate it in Ruby. I had no experience in either language so I skimmed through the Erlang docs. I also took some time to learn the basics of Ruby as I had planned on taking up the language it in the future. Turns out the logic of the code was simple enough, although I tripped over a few times because of syntax. This challenge was done in vanilla Ruby.\"\n\t      ),\n\t      _react2.default.createElement(\n\t        \"a\",\n\t        { href: \"https://gist.github.com/dudo/93c0d1ee5b627c2a6cde30616540fb7f\", target: \"_blank\", rel: \"noopener noreferrer\" },\n\t        \"Code in Erlang\"\n\t      ),\n\t      _react2.default.createElement(\"br\", null),\n\t      _react2.default.createElement(\n\t        \"a\",\n\t        { href: \"https://gist.github.com/Kiwilicious/3b6728f4276fe7beb14795f830abbebe\", target: \"_blank\", rel: \"noopener noreferrer\" },\n\t        \"Code in Ruby\"\n\t      )\n\t    )\n\t  );\n\t};\n\t\n\texports.default = FSFormChallenge;\n\tmodule.exports = exports[\"default\"];\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-cc-fsinput-jsx-761d76416a48cbd0a1b9.js","import React from 'react';\n\nconst FSFormChallenge = () => (\n  <div>\n    <div>\n      <h2>Input Form</h2>\n      <p>\n        This challenge involved replicating the look and functionality of an input form provided in\n        a gif. While most of the code was simple enough, I didn&apos;t have much experience\n        implementing animation on buttons. Instead I opted to use CSS transitions to color in the\n        border of the button. This challenge was done in React.\n      </p>\n      <a href=\"https://codepen.io/Kiwilicious/pen/RxqWXY?editors=0110\" target=\"_blank\" rel=\"noopener noreferrer\">Code here</a>\n      <hr />\n      <h2>Ruby Implementation of Erlang Code</h2>\n      <p>\n        This challenge involved taking the code provided in the language Erlang and recreate it in\n        Ruby. I had no experience in either language so I skimmed through the Erlang docs. I also\n        took some time to learn the basics of Ruby as I had planned on taking up the language it in\n        the future. Turns out the logic of the code was simple enough, although I tripped over a few\n        times because of syntax. This challenge was done in vanilla Ruby.\n      </p>\n      <a href=\"https://gist.github.com/dudo/93c0d1ee5b627c2a6cde30616540fb7f\" target=\"_blank\" rel=\"noopener noreferrer\">Code in Erlang</a>\n      <br />\n      <a href=\"https://gist.github.com/Kiwilicious/3b6728f4276fe7beb14795f830abbebe\" target=\"_blank\" rel=\"noopener noreferrer\">Code in Ruby</a>\n    </div>\n  </div>\n);\n\nexport default FSFormChallenge;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/cc-fsinput.jsx"],"sourceRoot":""}